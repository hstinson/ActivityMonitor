using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Q42.HueApi;
using Q42.HueApi.ColorConverters;
using Q42.HueApi.ColorConverters.Original;
using Q42.HueApi.Interfaces;
using Q42.HueApi.Models.Groups;

namespace ActivityMonitor
{
    /// <summary>
    /// Blinks Hue light(s) when notification is requested.
    /// </summary>
    class HueLightsNotification : INotifier
    {
        private readonly string appKey;
        private ILocalHueClient client;

        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="appKey">
        /// ID for registered Hue app. ID is generated by following the steps
        /// at https://www.developers.meethue.com/documentation/getting-started. 
        /// </param>
        public HueLightsNotification(string appKey)
        {
            this.appKey = appKey;
        }

        /// <inheritdoc />
        public async Task InitializeAsync()
        {
            IBridgeLocator locator = new HttpBridgeLocator();
            var bridgeAddresses = await locator.LocateBridgesAsync(TimeSpan.FromSeconds(15));

            client = new LocalHueClient(bridgeAddresses.First());
            client.Initialize(appKey);

            await NotifyAsync(0, 0, 255, 1500);
        }

        /// <inheritdoc />
        public async Task NotifyAsync()
        {
            await NotifyAsync(255, 0, 0, 2500);
        }

        private async Task NotifyAsync(int red, int green, int blue, int alertTimeMilliseconds)
        {
            // Get previous light states for each light
            var groups = (await client.GetGroupsAsync())
                .Where(group => !group.Class.HasValue || group.Class.Value == RoomClass.Office)
                .ToList();

            // By using the alert 'multiple' flag, the light will turn on (if off) and 
            // blink until an alert 'none' flag is received again.
            var alertCommand = new LightCommand
            {
                Alert = Alert.Multiple,
            };
            alertCommand = alertCommand.SetColor(new RGBColor(red, green, blue));

            foreach (var group in groups)
            {
                foreach (var lightId in group.Lights)
                {
                    var light = await client.GetLightAsync(lightId);
                    var previousState = light.State;

                    var lightList = new List<string> { lightId };
                    await client.SendCommandAsync(alertCommand, lightList);

                    await Task.Delay(alertTimeMilliseconds);

                    var previousStateCommand = new LightCommand
                    {
                        Alert = Alert.None,
                        // Color is not reverted automatically; revert to the previous light state color
                        Hue = previousState.Hue,
                        Saturation = previousState.Saturation,
                        Brightness = previousState.Brightness,
                    };

                    await client.SendCommandAsync(previousStateCommand, lightList);
                }
            }
        }
    }
}
